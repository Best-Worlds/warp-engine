#!/bin/bash

# PROJECTPATH contains the full
# directory path of the project itself
PROJECTPATH=$(pwd)

# SCRIPTNAME contains the name
# of the current script (e.g. "server")
SCRIPTNAME="bin/$(basename $0)"

# Check availability of docker
hash docker 2>/dev/null || { echo >&2 "warp framework requires \"docker\""; exit 1; }

# Check availability of docker-compose
hash docker-compose 2>/dev/null || { echo >&2 "warp framework requires \"docker-compose\""; exit 1; }

# Check availability of ed
hash ed 2>/dev/null || { echo >&2 "warp framework requires \"ed command\". On debian install it running \"sudo apt-get install ed\""; exit 1; }

# Check availability of tr
hash tr 2>/dev/null || { echo >&2 "warp framework requires \"tr command\". On debian install it running \"sudo apt-get install tr\""; exit 1; }

[[ $(pwd) =~ [[:space:]]+ ]] && { echo "this folder contains spaces, warp framework requires a folder without spaces"; exit 1; }

include_warp_framework() {

    # INCLUDE VARIABLES
    . "$PROJECTPATH/.warp/variables.sh"
    # INCLUDE WARP FRAMEWORK
    . "$PROJECTPATH/.warp/includes.sh"

    warp_initialize_environments
}

if [ -d $PROJECTPATH/.warp/lib ]; then
    include_warp_framework
fi;

if [ -d $PROJECTPATH/.warp/lib ]; then
    # Check minimum versions
    warp_check_docker_version
fi;

# Handling options/arguments
POSITIONAL_PARAMS=()
for arg in $*; do
  if [[ ! "$arg" == -* ]] && [[ ! "$arg" == --* ]];
  then
    POSITIONAL_PARAMS+=( "$arg" )
    shift
  else
    # breaking process till find an option argument
    break
  fi
done

if [[ ! -z "$*" ]];
then
  OPTIONS=$*
  if [[ "$OPTIONS" == "-e" ]];
  then
    OPTIONS="-e empty"
  fi

  # Setting option arguments (-* or --* parameter)
  OPTS=`getopt -o e:hjsdar -l env:,help,hard,status,disable,enable,root -n 'parse-options' -- "${OPTIONS}"`

  eval set -- "$OPTS"

  while true; do
    case "$1" in
      -e | --env )
        if [[ "$2" =~ "empty" ]]
        then
          warp_set_current_remote_env
        else
          warp_set_current_remote_env $2
        fi
        shift
        break
      ;;
      -d | --disable)
        POSITIONAL_PARAMS+=( "--disable" )
        shift
        break
      ;;
      -a | --enable)
        POSITIONAL_PARAMS+=( "--enable" )
        shift
        break
      ;;
      -j | --hard)
        POSITIONAL_PARAMS+=( "--hard" )
        shift
        break
      ;;
      -h | --help )
        POSITIONAL_PARAMS+=( "--help" )
        shift
        break
      ;;
      -r | --root )
        POSITIONAL_PARAMS+=( "--root" )
        shift
        break
      ;;
      -s | --status)
        POSITIONAL_PARAMS+=( "--status" )
        shift
        break
      ;;
      -- | " -- ")
        shift
        ;;
      *)
        warp_message_error "Invalid $1 argument"
        exit 1
      ;;
    esac
  done
fi

setup_main() {

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        setup_help_usage
        exit 0;
    elif [ "$1" = "-n" ] || [ "$1" = "--no-interaction" ] ; then
        if [ ! -d $PROJECTPATH/.warp/setup ]; then
            warp_setup --no-interaction
            exit 0;
        fi;

        init_main init --no-interaction
        exit 1
    else
        if [ ! -d $PROJECTPATH/.warp/setup ]; then
            warp_setup install
            exit 0;
        fi;

        init_main init
    fi
}

setup_sandbox_main() {

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] && [ ! -d $PROJECTPATH/.warp/setup ] ; then
        setup_help_usage
        exit 0;
    else
        if [ ! -d $PROJECTPATH/.warp/setup ]; then
            warp_setup sandbox
            exit 0;
        fi;

        sandbox_main $*
    fi
}

setup_help_usage()
{
    if [ -d $PROJECTPATH/.warp/lib ]; then
        init_help_usage
        exit 0;
    else

        echo "  if you run for the first time, the installation of the framework begins"
        echo "  After the initial installation, a guided menu with options to create services"
        echo "  The following services can be configured:"
        echo "  1) Nginx Web Server"
        echo "  2) PHP service"
        echo "  3) MySQL service"
        echo "  4) Elasticsearch service"
        echo "  5) Redis service for cache, session, fpc"
        echo "  6) Rabbit service"
        echo "  7) Mailhog Server SMTP"
        echo "  8) Varnish service"
        echo "  9) PostgreSQL service"
        echo "  "
        echo "  If the program detects a previous configuration, it shows a shorter menu of options, to configure:"
        echo "  1) Work with one or more projects in parallel"
        echo "  2) Configure service ports"
        echo "  "
        echo "  Please run ./warp init"

        exit 0;
    fi
}

help() {

    if [ -d $PROJECTPATH/.warp/bin ]; then
        warp_banner

        . $PROJECTPATH/.warp/bin/help.sh

        help_main

        for filename in $PROJECTPATH/.warp/bin/*_help.sh; do
            . "$filename"
            $(basename $filename .sh) # execute default function
        done

        help_usage
    else
        warp_message_not_install_yet
        exit 0;
    fi;
}

warp_check_latest_version()
{
    WARP_VERSION_LATEST=$(curl --silent "https://api.github.com/repos/Best-Worlds/warp-engine/tags" | grep -i "name" | sed -E 's/.*"([^"]+)".*/\1/' | head -n 1)

    if [ -f $PROJECTPATH/.warp/lib/version.sh ] && [ ! -z "$WARP_VERSION_LATEST" ]
    then
        . $PROJECTPATH/.warp/lib/version.sh
        WARP_VERSION_LOCAL=$(echo $WARP_VERSION | tr -d ".")
        _WARP_VERSION_LATEST=$(echo $WARP_VERSION_LATEST | tr -d ".")

        if [ $WARP_VERSION_LOCAL -lt $_WARP_VERSION_LATEST ] && [ ! $WARP_VERSION_LOCAL -eq $_WARP_VERSION_LATEST ]
        then
            warp_message_warn "checking for new versions available..."
            warp_message ""
            sleep 1
            warp_message "current version $WARP_VERSION, new version available $WARP_VERSION_LATEST"
            warp_message ""

            while : ; do
                respuesta_update_warp_online=$( warp_question_ask_default "Are you sure you want to update Warp Framework? $(warp_message_info [Y/n]) " "Y" )
                if [ "$respuesta_update_warp_online" = "Y" ] || [ "$respuesta_update_warp_online" = "y" ] || [ "$respuesta_update_warp_online" = "N" ] || [ "$respuesta_update_warp_online" = "n" ] ; then
                    break
                else
                    warp_message_warn "Incorrect answer, you must select between two options: $(warp_message_info [Y/n]) "
                fi
            done

            if [ "$respuesta_update_warp_online" = "Y" ] || [ "$respuesta_update_warp_online" = "y" ]
            then
                curl --silent -u "$HTTP_AUTH_CREDENTIALS_USER:$HTTP_AUTH_CREDENTIALS_PASS" -L -o warp https://packages.bestworlds.com/warp-engine/release/latest && chmod 755 warp
                warp_setup --self-update
            fi
        else
            warp_message_info "Warp framework is at its latest version. Nothing to update."
        fi
    fi
}

warp_message_not_install_yet()
{
    echo "WARP-ENGINE has not been installed yet."
    echo "Please run ./warp init or ./warp init --help"
}

warp_update()
{
    if [ "$1" = "-f" ] || [ "$1" = "--force" ] ; then
        warp_setup --force
        exit 0;
    fi;

    if [ ! -d $PROJECTPATH/.warp/lib ]; then
        warp_message_not_install_yet
        exit 0;
    fi;

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        . "$PROJECTPATH/.warp/bin/update_help.sh"
        update_help_usage
        exit 0;
    fi

    if [ "$1" = "--images" ] ; then
        echo "checking if there are images available to update"
        docker-compose -f $DOCKERCOMPOSEFILE pull
        exit 0;
    fi

    if [ "$1" = "--self-update" ] ; then
        warp_check_latest_version
        exit 0
    fi

    warp_setup update
}

#######################################
# Print the usage information for the
# server control script
# Globals:
#   SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
#######################################
usage() {
  echo "Utility for controlling dockerized Web projects\n"
  echo "Usage:\n\n  $SCRIPTNAME <action> [options...] <arguments...>"
  echo ""
}


function warp_info()
{

    # IMPORT HELP

    . "$PROJECTPATH/.warp/bin/info_help.sh"

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        info_help_usage
        exit 0;
    fi;

    if ! warp_check_env_file ; then
        warp_message_error "file not found $(basename $ENVIRONMENTVARIABLESFILE)"
        exit 1;
    fi;

    if [ "$1" = "--ip" ] ; then
        warp_check_is_running_error

        docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}   {{.Name}}'   $(docker-compose -f  $DOCKERCOMPOSEFILE ps -q) | sed 's/ \// /'
    else
        webserver_main info
        php_main info
        mysql_main info
        remote_env_main info
        elasticsearch_main info
        redis_main info
        rabbit_main info
        mailhog_main info
        postgres_main info
        varnish_main info
    fi;
}

function warp_setup()
{
    # Create destination folder
    DESTINATION="."
    #mkdir -p ${DESTINATION}

    OPTION=$1

    # Find __ARCHIVE__ maker, read archive content and decompress it
    ARCHIVE=$(awk '/^__ARCHIVE__/ {print NR + 1; exit 0; }' "${0}")

    tail -n+${ARCHIVE} "${0}" | tar xpJ -C ${DESTINATION}

    if [ "$OPTION" = "sandbox" ]
    then
        if [ -d $PROJECTPATH/.warp/lib ] && [ -d $PROJECTPATH/.warp/bin ] ; then
            echo "Installing Warp mode Sandbox, wait a few moments"
            sleep 1
            echo "Successful installation!, starting configurations.."
            sleep 1
            include_warp_framework
            sandbox_main init
        fi
    fi

    if [ "$OPTION" = "--no-interaction" ]
    then
        if [ -d $PROJECTPATH/.warp/lib ] && [ -d $PROJECTPATH/.warp/bin ] ; then
            echo "Installing Warp mode --no-interaction, wait a few moments"
            sleep 1
            echo "Successful installation!, starting without wizard.."
            sleep 1
            include_warp_framework
            init_main init --no-interaction
        fi
    fi

    if [ "$OPTION" = "--force" ]
    then
        echo "Force updating Warp, wait a few moments"
        sleep 1
        echo "Successful update!"
        sleep 1
        include_warp_framework
        warp_env_change_version_sample_file
    fi

    if [ "$OPTION" = "--self-update" ]
    then
        echo "Self update Warp, wait a few moments"
        sleep 1
        echo "Successful update!"
        sleep 1
        include_warp_framework
        warp_env_change_version_sample_file
        warp_banner
        exit 0;
    fi

    if [ "$OPTION" = "install" ]
    then
        if [ -d $PROJECTPATH/.warp/lib ] && [ -d $PROJECTPATH/.warp/bin ] ; then
            echo "Installing Warp, wait a few moments"
            sleep 1
            echo "Successful installation!, starting configurations.."
            sleep 1
            include_warp_framework
            init_main init
        fi
    fi
}

function warp_check_binary_was_updated()
{
    if [ -f "$ENVIRONMENTVARIABLESFILE" ] && [ -f "$ENVIRONMENTVARIABLESFILESAMPLE" ] && [ -d $PROJECTPATH/.warp/lib ]
    then
        WARP_ENV_VERSION=$(grep "^WARP_VERSION" $ENVIRONMENTVARIABLESFILESAMPLE | cut -d '=' -f2)
        _WARP_ENV_VERSION=$(echo $WARP_ENV_VERSION | tr -d ".")

        . $PROJECTPATH/.warp/lib/version.sh
        _WARP_VERSION=$(echo $WARP_VERSION | tr -d ".")

        if [ ! -z "$WARP_ENV_VERSION" ]
        then
            # .env.sample > version.sh and not equal
            if [ $_WARP_ENV_VERSION -gt $_WARP_VERSION ] && [ ! $_WARP_ENV_VERSION -eq $_WARP_VERSION ]
            then
                # different version binary and current, force update
                warp_message_warn "binary and current version different, force update"
                warp_setup --force

                # save new version to ENVIRONMENTVARIABLESFILESAMPLE
                # warp_env_change_version_sample_file
            fi
        fi
    fi
}

# check if binary was updated
warp_check_binary_was_updated

## Generate file to check self-update
# check if the variables are not empty
if [[ ! -z "$CHECK_UPDATE_FILE" ]] && [[ ! -z "$CHECK_FREQUENCY_DAYS" ]]
then
    case "$(uname -s)" in
        Darwin)
        # autodetect docker in OSX
        DATE_OSX_LINUX=$(date -v +${CHECK_FREQUENCY_DAYS}d +%Y%m%d)
        ;;
        Linux)
        DATE_OSX_LINUX=$(date -d "+${CHECK_FREQUENCY_DAYS} days" +%Y%m%d)
        ;;
    esac

    if [[ -f "$CHECK_UPDATE_FILE" ]]
    then
        _NEXT_CHECK=$(cat "$CHECK_UPDATE_FILE")
        _TODAY=$(date +%Y%m%d)

        if [[ $_TODAY -ge $_NEXT_CHECK ]] && [[ "$1" != "start" ]]
        then
            warp_check_latest_version
            # update next check
            echo $DATE_OSX_LINUX > "$CHECK_UPDATE_FILE" 2> /dev/null
        fi
    else
        touch "$CHECK_UPDATE_FILE" 2> /dev/null
        # save next check
        echo $DATE_OSX_LINUX > "$CHECK_UPDATE_FILE" 2> /dev/null
    fi
fi

# Setting service param
SERVICE_PARAM=${POSITIONAL_PARAMS[0]};
# Removing service param once redirected to the service
POSITIONAL_PARAMS=("${POSITIONAL_PARAMS[@]:1}")

case "${SERVICE_PARAM}" in

    build)
      build_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    composer)
      composer_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    crontab)
      crontab_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    docker)
      docker_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    ece-tools|ece-patches)
      magento_main ${POSITIONAL_PARAMS[@]}
    ;;

    elasticsearch)
      elasticsearch_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    fix)
      fix_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    git)
      git_main ${POSITIONAL_PARAMS[@]}
    ;;

    grunt)
      grunt_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    info)
      warp_info ${POSITIONAL_PARAMS[@]}
    ;;

    init)
      setup_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    ioncube)
      ioncube_main ${POSITIONAL_PARAMS[@]}
    ;;

    logs)
      logs_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    magento)
      magento_main ${POSITIONAL_PARAMS[@]}
    ;;

    mailhog)
      mailhog_main ${POSITIONAL_PARAMS[@]}
    ;;

    mysql)
      mysql_main ${POSITIONAL_PARAMS[@]}
    ;;

    npm)
      npm_main ${POSITIONAL_PARAMS[@]}
    ;;

    php)
      php_main ${POSITIONAL_PARAMS[@]}
    ;;

    postgres)
      postgres_main ${POSITIONAL_PARAMS[@]}
    ;;

    ps)
      ps_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    rabbit)
      rabbit_main ${POSITIONAL_PARAMS[@]}
    ;;

    redis)
      redis_main ${POSITIONAL_PARAMS[@]}
    ;;

    remote)
      remote_env_main ${POSITIONAL_PARAMS[@]}
    ;;

    reset)
      reset_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    restart)
      restart_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    rsync)
      rsync_main ${POSITIONAL_PARAMS[@]}
    ;;

    sandbox | sb)
      setup_sandbox_main ${POSITIONAL_PARAMS[@]}
    ;;

    selenium)
      selenium_main ${POSITIONAL_PARAMS[@]}
    ;;

    start)
      start_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    stop)
      stop_main ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    sync)
      sync_main ${POSITIONAL_PARAMS[@]}
    ;;

    update)
      warp_update ${POSITIONAL_PARAMS[@]}
    ;;

    varnish)
      varnish_main  ${SERVICE_PARAM} ${POSITIONAL_PARAMS[@]}
    ;;

    volume)
      volume_main ${POSITIONAL_PARAMS[@]}
    ;;

    xdebug)
      xdebug_main ${POSITIONAL_PARAMS[@]}
    ;;

    *)
    help
    ;;

esac

exit 0

__ARCHIVE__
