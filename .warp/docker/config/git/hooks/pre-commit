#!/bin/bash

ROOT_DIR=`git rev-parse --show-toplevel`

. "$ROOT_DIR/.warp/variables.sh"
. "$ROOT_DIR/.warp/lib/message.sh"
. "$ROOT_DIR/.warp/lib/env.sh"

# Functions
validate_standard () {
    local STANDARD=$1
    local LOCAL_FLAG
    local FILES_VARIABLE_NAME="${STANDARD^^}_STANDARD_FILES"
    local FILE_EXTENSIONS_VARIABLE_NAME="${STANDARD^^}_STANDARD_EXTENSIONS"

    # shellcheck disable=SC2155
    local ERROR_SEVERITY=$(get_severity_value ${STANDARD} "error")
    # shellcheck disable=SC2155
    local WARNING_SEVERITY=$(get_severity_value ${STANDARD} "warning")

    local FILES
    FILES=$(eval echo "\${${FILES_VARIABLE_NAME}[*]}")

    local FILE_EXTENSIONS
    FILE_EXTENSIONS=$(eval echo "\${${FILE_EXTENSIONS_VARIABLE_NAME}[*]}")
    FILE_EXTENSIONS=${FILE_EXTENSIONS// /,}

    # Validate Magento2 standard files
    echo -e "Running ${STANDARD} (${FILE_EXTENSIONS}) Coding standards validations..." >> ${LOG_FILE}
    docker-compose -f "${DOCKERCOMPOSEFILE}" exec -u www-data -T php /bin/bash -c "vendor/bin/phpcs --basepath=/var/www/html/ --error-severity=${ERROR_SEVERITY} --warning-severity=${WARNING_SEVERITY} --standard=${STANDARD} ${FILES}" >> ${LOG_FILE}

    if [ $? -eq 0 ]
    then
        LOCAL_FLAG=0
        echo -e "\nNo Coding Standard errors detected.\n" >> ${LOG_FILE}
    else
        LOCAL_FLAG=1
    fi

    echo ${LOCAL_FLAG}
}

fix_standard () {
    local STANDARD=$1
    local FILES_VARIABLE_NAME="${STANDARD^^}_STANDARD_FILES"

    # shellcheck disable=SC2155
    local ERROR_SEVERITY=$(get_severity_value ${STANDARD} "error")
    # shellcheck disable=SC2155
    local WARNING_SEVERITY=$(get_severity_value ${STANDARD} "warning")

    local FILES
    FILES=$(eval echo "\${${FILES_VARIABLE_NAME}[*]}")

    # Validate Magento2 standard files
    echo -e "\nTrying to fix ${STANDARD} Coding standards errors automatically..." >> ${LOG_FILE}
    docker-compose -f "${DOCKERCOMPOSEFILE}" exec -u www-data -T php /bin/bash -c "vendor/bin/phpcbf --basepath=/var/www/html/ --error-severity=${ERROR_SEVERITY} --warning-severity=${WARNING_SEVERITY} --standard=${STANDARD} ${FILES}" >> ${LOG_FILE}

    echo $?
}

get_severity_value () {
    local STANDARD=$1
    local TYPE=$2

    local SEVERITY_VALUE
    SEVERITY_VALUE="$(warp_env_read_var "GIT_CS_${STANDARD^^}_STANDARD_${TYPE^^}_SEVERITY")"
    if [ -z ${SEVERITY_VALUE} ]
    then
        SEVERITY_VALUE=1
    fi

    echo ${SEVERITY_VALUE}
}
# Hook parameters
COMMIT_MSG=$(git rev-parse --abbrev-ref HEAD)

# Directory Configurations
LOG_DIR="${PROJECTPATH}/var/log/git"
CURRENT_DATE=$(date '+%Y-%m-%d_%H-%M-%S')
LOG_FILENAME="${CURRENT_DATE}.log"

# Magento2 Standard Information
MAGENTO2_STANDARD="Magento2"
MAGENTO2_STANDARD_EXTENSIONS=( "php" "phtml" "xml" "less" )
MAGENTO2_STANDARD_FILES=( )
MAGENTO2_STANDARD_VALIDATION_RESULT_FLAG=0
MAGENTO2_STANDARD_AUTOMATIC_FIXES_FLAG=0

# Squiz Standard Information
SQUIZ_STANDARD="squiz"
SQUIZ_STANDARD_EXTENSIONS=( "js" )
SQUIZ_STANDARD_FILES=( )
SQUIZ_STANDARD_VALIDATION_RESULT_FLAG=0
SQUIZ_STANDARD_AUTOMATIC_FIXES_FLAG=0

STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD`
NOT_STAGED_FILES_CMD=`git status -s | awk '/MM / { print $2 }'`

if [ "$#" -eq 1 ]
then
	oIFS=$IFS
	IFS='
	'
	SFILES="$1"
	IFS=$oIFS
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}
SNOTSTAGEDFILES=${SNOTSTAGEDFILES:-$NOT_STAGED_FILES_CMD}

if [ "$SFILES" != "" ]
then
    warp_message ""
    warp_message_info2 "The following files has been modified:"
    warp_message ""

    i=1
    for FILE in $SFILES
    do
        warp_message_info2 "${i}- ${FILE}"
        # Check if the file has changes
        if [[ "${SNOTSTAGEDFILES[*]}" =~ ${FILE} ]]
        then
            # Read user input, assign stdin to keyboard
            exec < /dev/tty

            while read -p "$(warp_message_warn "This file has unstaged changes. Do you want to add them to the commit? (Y/n) ")" response; do
                case $response in
                    "" )
                        git add ${FILE}
                        break;;
                    [Yy] )
                        git add ${FILE}
                        break;;
                    [Nn] )
                        warp_message ""
                        warp_message_error "Commit your file changes before moving forward."
                        exit 1
                        break;;
                    * ) warp_message_warn "Please answer y (yes) or n (no):" && continue;
                esac
            done
        fi

        i=$((i+1))
    done
else
    exit 0
fi

warp_message ""
warp_message_warn "Checking PHP syntax..."
warp_message ""

for FILE in $SFILES
do
    FILES="$FILES $FILE"

    FILE_EXTENSION=${FILE##*.}
    if [[ "${MAGENTO2_STANDARD_EXTENSIONS[*]}" =~ ${FILE_EXTENSION} ]]
    then
        MAGENTO2_STANDARD_FILES+=("${FILE}")
        if [[ ! "${FILE_EXTENSION}" = "php" ]]
        then
            continue
        fi
    else
        if [[ "${SQUIZ_STANDARD_EXTENSIONS[*]}" =~ ${FILE_EXTENSION} ]]
        then
            SQUIZ_STANDARD_FILES+=("${FILE}")
        else
            warp_message_info2 "Unrecognizible extension [{$FILE_EXTENSION}] on the standards for the file ${FILE}. Skipping."
        fi
        # Skipping syntax validation
        continue
    fi

	docker-compose -f "${DOCKERCOMPOSEFILE}" exec -u www-data -T php /bin/bash -c "php -l -d display_errors=0 ${FILE}"
	if [ $? != 0 ]
	then
	    warp_message ""
	    warp_message_error "Fix the syntax errors before commit."
		exit 1
	fi

done

if [ "$FILES" != "" ]
then
    # Creates log directory within git override folder
    if [ ! -d ${LOG_DIR} ]; then
        mkdir ${LOG_DIR} && chmod 775 ${LOG_DIR}
    fi

    # Creates new directory based on commit message (sluged)
    COMMIT_LOG_DIR=`echo ${COMMIT_MSG} | iconv -t ascii//TRANSLIT | sed -E 's/[~\^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+\|-+$//g' | sed -E 's/^-+//g' | sed -E 's/-+$//g' | tr A-Z a-z`
    FULL_COMMIT_LOG_DIR=${LOG_DIR}/${COMMIT_LOG_DIR}

    if [ ! -d ${FULL_COMMIT_LOG_DIR} ]; then
        mkdir ${FULL_COMMIT_LOG_DIR} && chmod 775 ${FULL_COMMIT_LOG_DIR}
    fi

    QTY_FILES=$(ls -la ${FULL_COMMIT_LOG_DIR} | grep .log | wc -l)
    CURRENT_FILE_NUMBER=$((QTY_FILES+1))
    LOG_FILE=${FULL_COMMIT_LOG_DIR}/${CURRENT_FILE_NUMBER}-${LOG_FILENAME}

    warp_message ""
    warp_message_warn "Running Coding Standard validations..."

    if [ ! -z "${MAGENTO2_STANDARD_FILES[*]}" ]
    then
        MAGENTO2_STANDARD_VALIDATION_RESULT_FLAG=$(validate_standard "${MAGENTO2_STANDARD}")
    fi

    # Validate squiz standard files
    if [ ! -z "${SQUIZ_STANDARD_FILES[*]}" ]
    then
        SQUIZ_STANDARD_VALIDATION_RESULT_FLAG=$(validate_standard "${SQUIZ_STANDARD}")
    fi

    # If errors/warnings were detected
    if [ "${MAGENTO2_STANDARD_VALIDATION_RESULT_FLAG}" != 0 ] || [ "${SQUIZ_STANDARD_VALIDATION_RESULT_FLAG}" != 0 ]
    then

        echo -e  "Coding Standards errors have been detected. Trying to correct them automatically..." >> ${LOG_FILE}
        MAGENTO2_STANDARD_AUTOMATIC_FIXES_FLAG=$(fix_standard "${MAGENTO2_STANDARD}")
        SQUIZ_STANDARD_AUTOMATIC_FIXES_FLAG=$(fix_standard "${SQUIZ_STANDARD}")

        # No errors to be fixed automatically
        if [ "${MAGENTO2_STANDARD_AUTOMATIC_FIXES_FLAG}" -eq 0 ] && [ "${SQUIZ_STANDARD_AUTOMATIC_FIXES_FLAG}" -eq 0 ]
        then
            warp_message ""
            warp_message_error "Review the report in order to fix the remaining errors => ${LOG_FILE}"
            exit 1
        fi

        # Errors has been automatically corrected. Re-adding files and re-run coding standards validation
        git add ${FILES}

        echo -e "\nRunning Coding Standard validations again...\n" >> ${LOG_FILE}

        if [ "${MAGENTO2_STANDARD_VALIDATION_RESULT_FLAG}" != 0 ]
        then
            MAGENTO2_STANDARD_VALIDATION_RESULT_FLAG=$(validate_standard "${MAGENTO2_STANDARD}")
        fi
        if [ "${SQUIZ_STANDARD_VALIDATION_RESULT_FLAG}" != 0 ]
        then
            SQUIZ_STANDARD_VALIDATION_RESULT_FLAG=$(validate_standard "${SQUIZ_STANDARD}")
        fi

        if [ "${MAGENTO2_STANDARD_VALIDATION_RESULT_FLAG}" != 0 ] || [ "${SQUIZ_STANDARD_VALIDATION_RESULT_FLAG}" != 0 ]
        then
            warp_message ""
            warp_message_error "Review the report in order to fix the remaining errors => ${LOG_FILE}"
            exit 1
        fi
    fi

    warp_message ""
    TMP_MESSAGE="Nothing to correct after code validation processes execution. Changes ready to be committed."
    warp_message_ok "${TMP_MESSAGE}" && echo -e "\n${TMP_MESSAGE}" >> ${LOG_FILE}
    warp_message ""
  fi

exit $?
